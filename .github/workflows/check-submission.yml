on:

  workflow_call:
    inputs:

      repository:
        required: true
        description: Full name (owner/repo-name) to be checked
        type: string

      ref:
        required: true
        description: Git ref to be checked
        type: string

      reproducible-document:
        required: false
        description: Path to reproducible document, if any
        default: ''
        type: string

      quarto-render-args:
        required: false
        description: Extra args/options for the quarto render command
        default: --to html -M self-contained:true --execute
        type: string

      container-registry:
        description: If set, container image will be pushed to this registry
        type: string
        required: false
        default: ghcr.io

      binder-cache-branch:
        description: If set (default), the built container image will be written to .binder/Dockerfile and pushed to this branch. To disable this, set it to the empty string.
        type: string
        required: false
        default: binder-cache

      build-artifacts:
        description:
          If set, these files or directories will be extracted by the built container image and made available as GHA artifacts.
          Multiple entries are supported if a multiline string is used.
          Each line may refer to either files or directories, however wildcard patterns are NOT supported.
        type: string
        required: false
        default: ''

      test-container:
        description: Container name to use for testing the built image.
        type: string
        required: false
        default: canary

      binder-base-url:
        description: Base URL for Binderhub instance to use for launch links/buttons
        type: string
        required: false
        default: 'https://mybinder.org/v2'

jobs:

  image-build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.repo2docker.outputs.IMAGE_SHA_NAME }}
    steps:

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: repo2docker (no push)
        uses: jupyterhub/repo2docker-action@b3cd89ff99f95b00abb5b4db27ec49bb4d3f8c85
        if: inputs.container-registry == ''
        id: repo2docker-no-push
        with:
          NO_PUSH: "true"
          IMAGE_NAME: ${{ inputs.repository }}
          MYBINDERORG_TAG: ${{ inputs.ref }}

      - name: repo2docker (push)
        uses: jupyterhub/repo2docker-action@b3cd89ff99f95b00abb5b4db27ec49bb4d3f8c85
        if: inputs.container-registry
        id: repo2docker
        with:
          NO_PUSH: "false"
          DOCKER_REGISTRY: ${{ inputs.container-registry }}
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ${{ inputs.repository }}
          MYBINDERORG_TAG: ${{ inputs.ref }}

  container-startup:
    name: Check that container starts up without errors
    if: inputs.test-container
    runs-on: ubuntu-latest
    needs: [image-build]
    steps:

      - name: Run command to test built image ${{ needs.image-build.outputs.image }}
        id: run
        run: |
          canary_command="ls -la"
          docker run --name "${{ inputs.test-container }}" "${{ needs.image-build.outputs.image }}" $canary_command

      - name: Copy artifacts from container
        id: copy
        run: |
          stuff_to_copy="${{ inputs.build-artifacts }}"
          container_working_dir=$(docker inspect --format '{{.Config.WorkingDir}}' "${{ inputs.test-container }}")

          for file_or_dir in $stuff_to_copy
          do
              docker cp "${{ inputs.test-container }}:${container_working_dir}" "./${file_or_dir}"
          done

          # delete container once done
          docker rm --volumes "${{ inputs.test-container }}"

      - name: Upload copied build artifacts
        if: inputs.build-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ inputs.build-artifacts }}
          if-no-files-found: error
        id: upload-build-artifacts

  binder-cache:
    runs-on: ubuntu-latest
    if: inputs.binder-cache-branch
    needs: [image-build]
    outputs:
      ref: ${{ steps.update-repo.branch-name }}
    steps:

      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: Update repo with Binder cache branch
        id: update-repo
        run: |
          branch_name="${{ inputs.binder-cache-branch }}"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git config --global push.autoSetupRemote true
          git switch --force-create "$branch_name"
          mkdir -p .binder

          cat << 'EOF' > .binder/Dockerfile
          FROM ${{ needs.image-build.outputs.image }}
          EOF

          git add .binder/Dockerfile
          git commit -m "Update image tag"
          git push -f
          echo "branch-name=$branch_name" >> $GITHUB_OUTPUT

  report:
    name: Report status
    needs: [image-build, container-startup, binder-cache]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:

      - name: Report build failure
        if: ${{ !( needs.image-build.result == 'success' && needs.container-startup.result == 'success') }}
        run: |
          cat << EOF > $GITHUB_STEP_SUMMARY
          The CI run was not successful for ${{ inputs.repository }}@${{ inputs.ref }}.

          See the following resources for details:
          
          - <https://github.com/USRSE/usrse23/wiki/notebooks-submissions>

          EOF

      - name: Report build success
        if:  needs.image-build.result == 'success' && needs.container-startup.result == 'success'
        run: |
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          The CI build was successful for ${{ inputs.repository }}@${{ inputs.ref }}!

          EOF

      - name: Add Binder launch (w/ cache)
        if: needs.binder-cache.result == 'success'
        run: |
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          [![Binder](https://mybinder.org/badge_logo.svg)](${{ inputs.binder-base-url }}/gh/${{ inputs.repository }}/${{ needs.binder-cache.outputs.ref }}) :point_left: Launch Binder from ${{ inputs.repository }}@${{ needs.binder-cache.outputs.ref }} (faster)
          EOF

      - name: Add Binder launch
        run: |
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          [![Binder](https://mybinder.org/badge_logo.svg)](${{ inputs.binder-base-url }}/gh/${{ inputs.repository }}/${{ inputs.ref}}) :point_left: Launch Binder from ${{ inputs.repository }}@${{ inputs.ref }} (needs rebuild)
          EOF
